--------------------| Day 1 [11/05/2025]|--------------------

#1 The print() function

    print("Hello, World!")   # For printing string
    Var = 10                 # Declaring variable
    print(Var)               # printing variable

#2 Python escape and newline characters

    print(" \"The itsy bitsy spider\nclimbed up the waterspout.\"")
    print()
    print(" \\ Down came the rain\nand washed the spider out.")

#3 Using multiple arguments

    print("The itsy bitsy spider" , "climbed up" , "the waterspout.")

#4 Positional arguments

    print("My name is", "Python.")
    print("Monty Python.")

#5 Keyword arguments

    print("My name is", "Python.", end=" ")
    print("Monty Python.")

    print()

    print("My", "name", "is", "Monty", "Python.", sep="-")

    print()

    print("My", "name", "is", sep="_", end="*")
    print("Monty", "Python.", sep="*", end="*\n")

#6 Formatting the output

    print("    *")
    print("   * *")
    print("  *   *")
    print(" *     *")
    print("***   ***")
    print("  *   *")
    print("  *   *")
    print("  *****")

#7 Literals â€“ the data in itself

    print("2")
    print(2)

#8 Integers

    print(0o123)

#9 Strings

    print("I like \"Monty Python\"")
    print('I like "Monty Python"')
    print('I\'m Monty Python.')

#10 Boolean values

    print(True > False)
    print(True < False)

#11 Python as a calculator

    a = 10
    b = 3

    print("Addition:", a + b)          # 13
    print("Subtraction:", a - b)       # 7
    print("Multiplication:", a * b)    # 30
    print("Division:", a / b)          # 3.333...
    print("Floor Division:", a // b)   # 3
    print("Modulus:", a % b)           # 1
    print("Exponentiation:", a ** b)   # 1000

#12 Operators and their priorities

    # Operator Precedence Example: * has higher priority than +
    print("2 + 3 * 5 =", 2 + 3 * 5)  # Expected: 2 + (3 * 5) = 17

    # Left-sided Binding of Modulus (%)
    print("9 % 6 % 2 =", 9 % 6 % 2)  # Expected: (9 % 6) % 2 = 3 % 2 = 1

    # Right-sided Binding of Exponentiation (**)
    print("2 ** 2 ** 3 =", 2 ** 2 ** 3)  # Expected: 2 ** (2 ** 3) = 2 ** 8 = 256

    # Negation and Exponentiation (Important precedence case)
    print("-3 ** 2 =", -3 ** 2)         # Expected: -(3 ** 2) = -9
    print("-2 ** 3 =", -2 ** 3)         # Expected: -(2 ** 3) = -8
    print("-(3 ** 2) =", -(3 ** 2))     # Expected: -9 (same as above, made explicit)

#13 Operators and parentheses

    print((5 * ((25 % 13) + 100) / (2 * 13)) // 2)

------------------------------------------------------------------------------------------------------
# Variables

âœ… Variables in Python
A variable is a named container that stores data (like numbers, text, etc.).
It has:
    A name
    A value

ðŸ“Œ Rules for Variable Names
Must start with a letter (Aâ€“Z or aâ€“z) or underscore _
Can contain letters, digits (0â€“9), and underscores
Case-sensitive (Rate, rate, and RATE are different)
Must not be a Python keyword

ðŸ›‘ Python Keywords (Can't be used as names)
['False', 'None', 'True', 'and', 'as', 'assert', 'break',
 'class', 'continue', 'def', 'del', 'elif', 'else', 'except',
 'finally', 'for', 'from', 'global', 'if', 'import', 'in',
 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise',
 'return', 'try', 'while', 'with', 'yield']

#14 Variables: Data-Shaped Boxes

ðŸ”¹ Notes:
    Variables are containers for storing data.
    They are created when you assign a value to them.
    Values can change and can be of any data type (int, float, string, etc.)

ðŸ”¸ Example:
    var = 5         # Integer
    print(var)

    var = 3.14      # Float
    print(var)

    var = "Hello"   # String
    print(var)

#15 Variable Names
ðŸ”¹ Notes:
    Must start with a letter or underscore.
    Can contain letters, numbers, and underscores.
    Case-sensitive.
    Cannot be a Python keyword.
    Follow PEP 8 naming style: lower_case_with_underscores.

ðŸ”¸ Example:
    my_variable = 10
    print(my_variable)

    # Invalid: 10var = 5  (will cause error)
    # Invalid: import = 5 (keyword)

#16 How to Create a Variable
ðŸ”¹ Notes:
    Created using assignment (=).
    Variable is created and assigned in one line.

ðŸ”¸ Example:
    var = 1
    print(var)

#17 How to Use a Variable
ðŸ”¹ Notes:
    Use variables in expressions or print().
    Do not use a variable before assigning it.
    Case matters: var â‰  Var.

ðŸ”¸ Example:
    var = "3.8.5"
    print("Python version: " + var)

    # Invalid: print(unknown_var)  â†’ causes error

#18 Reassigning a Variable
ðŸ”¹ Notes:
    Reassign using the same = operator.
    Python does not interpret = as equality, but as assignment.

ðŸ”¸ Example:
    var = 100
    var = 200 + 300
    print(var)  # Output: 500

    var = var + 1
    print(var)  # Output: 501

#19 Solving Mathematical Problems (e.g., Pythagoras)
ðŸ”¹ Notes:
    Use ** for power and parentheses to control operations.
    Can store and calculate using formulas.

ðŸ”¸ Example:
    a = 3.0
    b = 4.0
    c = (a**2 + b**2) ** 0.5
    print("c =", c)  # Output: c = 5.0

#20 LAB: Apple Story
ðŸ”¹ Notes:
    Use variables for storing values.
    Add and print them.

ðŸ”¸ Example:
    john = 3
    mary = 5
    adam = 6

    print(john, mary, adam)

    total_apples = john + mary + adam
    print("Total number of apples:", total_apples)

#21 Shortcut Operators
ðŸ”¹ Notes:
    Shortened syntax for updating variables.
    Format: var op= value is same as var = var op value

ðŸ”¸ Examples:
    x = 2
    x *= 3     # Same as x = x * 3
    print(x)   # Output: 6

    sheep = 0
    sheep += 1
    print(sheep)  # Output: 1