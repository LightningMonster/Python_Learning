--------------------| Day 1 [11/05/2025]|--------------------

#1 The print() function

    print("Hello, World!")   # For printing string
    Var = 10                 # Declaring variable
    print(Var)               # printing variable

#2 Python escape and newline characters

    print(" \"The itsy bitsy spider\nclimbed up the waterspout.\"")
    print()
    print(" \\ Down came the rain\nand washed the spider out.")

#3 Using multiple arguments

    print("The itsy bitsy spider" , "climbed up" , "the waterspout.")

#4 Positional arguments

    print("My name is", "Python.")
    print("Monty Python.")

#5 Keyword arguments

    print("My name is", "Python.", end=" ")
    print("Monty Python.")

    print()

    print("My", "name", "is", "Monty", "Python.", sep="-")

    print()

    print("My", "name", "is", sep="_", end="*")
    print("Monty", "Python.", sep="*", end="*\n")

#6 Formatting the output

    print("    *")
    print("   * *")
    print("  *   *")
    print(" *     *")
    print("***   ***")
    print("  *   *")
    print("  *   *")
    print("  *****")

#7 Literals – the data in itself

    print("2")
    print(2)

#8 Integers

    print(0o123)

#9 Strings

    print("I like \"Monty Python\"")
    print('I like "Monty Python"')
    print('I\'m Monty Python.')

#10 Boolean values

    print(True > False)
    print(True < False)

#11 Python as a calculator

    a = 10
    b = 3

    print("Addition:", a + b)          # 13
    print("Subtraction:", a - b)       # 7
    print("Multiplication:", a * b)    # 30
    print("Division:", a / b)          # 3.333...
    print("Floor Division:", a // b)   # 3
    print("Modulus:", a % b)           # 1
    print("Exponentiation:", a ** b)   # 1000

#12 Operators and their priorities

    # Operator Precedence Example: * has higher priority than +
    print("2 + 3 * 5 =", 2 + 3 * 5)  # Expected: 2 + (3 * 5) = 17

    # Left-sided Binding of Modulus (%)
    print("9 % 6 % 2 =", 9 % 6 % 2)  # Expected: (9 % 6) % 2 = 3 % 2 = 1

    # Right-sided Binding of Exponentiation (**)
    print("2 ** 2 ** 3 =", 2 ** 2 ** 3)  # Expected: 2 ** (2 ** 3) = 2 ** 8 = 256

    # Negation and Exponentiation (Important precedence case)
    print("-3 ** 2 =", -3 ** 2)         # Expected: -(3 ** 2) = -9
    print("-2 ** 3 =", -2 ** 3)         # Expected: -(2 ** 3) = -8
    print("-(3 ** 2) =", -(3 ** 2))     # Expected: -9 (same as above, made explicit)

#13 Operators and parentheses

    print((5 * ((25 % 13) + 100) / (2 * 13)) // 2)

------------------------------------------------------------------------------------------------------
# Variables

✅ Variables in Python
A variable is a named container that stores data (like numbers, text, etc.).
It has:
    A name
    A value

📌 Rules for Variable Names
Must start with a letter (A–Z or a–z) or underscore _
Can contain letters, digits (0–9), and underscores
Case-sensitive (Rate, rate, and RATE are different)
Must not be a Python keyword

🛑 Python Keywords (Can't be used as names)
['False', 'None', 'True', 'and', 'as', 'assert', 'break',
 'class', 'continue', 'def', 'del', 'elif', 'else', 'except',
 'finally', 'for', 'from', 'global', 'if', 'import', 'in',
 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise',
 'return', 'try', 'while', 'with', 'yield']

#14 Variables: Data-Shaped Boxes

🔹 Notes:
    Variables are containers for storing data.
    They are created when you assign a value to them.
    Values can change and can be of any data type (int, float, string, etc.)

🔸 Example:
    var = 5         # Integer
    print(var)

    var = 3.14      # Float
    print(var)

    var = "Hello"   # String
    print(var)

#15 Variable Names
🔹 Notes:
    Must start with a letter or underscore.
    Can contain letters, numbers, and underscores.
    Case-sensitive.
    Cannot be a Python keyword.
    Follow PEP 8 naming style: lower_case_with_underscores.

🔸 Example:
    my_variable = 10
    print(my_variable)

    # Invalid: 10var = 5  (will cause error)
    # Invalid: import = 5 (keyword)

#16 How to Create a Variable
🔹 Notes:
    Created using assignment (=).
    Variable is created and assigned in one line.

🔸 Example:
    var = 1
    print(var)

#17 How to Use a Variable
🔹 Notes:
    Use variables in expressions or print().
    Do not use a variable before assigning it.
    Case matters: var ≠ Var.

🔸 Example:
    var = "3.8.5"
    print("Python version: " + var)

    # Invalid: print(unknown_var)  → causes error

#18 Reassigning a Variable
🔹 Notes:
    Reassign using the same = operator.
    Python does not interpret = as equality, but as assignment.

🔸 Example:
    var = 100
    var = 200 + 300
    print(var)  # Output: 500

    var = var + 1
    print(var)  # Output: 501

#19 Solving Mathematical Problems (e.g., Pythagoras)
🔹 Notes:
    Use ** for power and parentheses to control operations.
    Can store and calculate using formulas.

🔸 Example:
    a = 3.0
    b = 4.0
    c = (a**2 + b**2) ** 0.5
    print("c =", c)  # Output: c = 5.0

#20 LAB: Apple Story
🔹 Notes:
    Use variables for storing values.
    Add and print them.

🔸 Example:
    john = 3
    mary = 5
    adam = 6

    print(john, mary, adam)

    total_apples = john + mary + adam
    print("Total number of apples:", total_apples)

#21 Shortcut Operators
🔹 Notes:
    Shortened syntax for updating variables.
    Format: var op= value is same as var = var op value

🔸 Examples:
    x = 2
    x *= 3     # Same as x = x * 3
    print(x)   # Output: 6

    sheep = 0
    sheep += 1
    print(sheep)  # Output: 1

#22 LAB: Miles ↔ Kilometers Converter
🔹 Notes:
Use known conversion: 1 mile = 1.61 km
Use round(value, digits) for rounded output.

🔸 Example:
    miles = 7.38
    kilometers = 12.25

    print(miles, "miles is", round(miles * 1.61, 2), "kilometers")
    print(kilometers, "kilometers is", round(kilometers / 1.61, 2), "miles")

#23 LAB: Operators and Expressions
🔹 Notes:
    Evaluate algebraic expressions using Python syntax.
    Use ** for exponents, * for multiplication.

🔸 Example:
    x = -1
    y = 3 * x**3 - 2 * x**2 + 3 * x - 1
    print("y =", y)

-------------------------------------------------------------------------------------
# Comments

#24 Comments: Why, When, and How?
🔹 Notes:
    Comments are notes in the code for humans, ignored by Python.
    Use # to start a comment.
    Multi-line comments must start each line with #.
    Use comments to explain:
    What the code does
    Why certain choices were made
    Who wrote the code and when

🔸 Example:
    # This program calculates the hypotenuse of a right-angled triangle.
    a = 3.0  # First leg
    b = 4.0  # Second leg

    # Hypotenuse using Pythagorean theorem
    c = (a ** 2 + b ** 2) ** 0.5

    print("c =", c)

#25 Marking Fragments of Code
🔹 Notes:
    Comments can temporarily disable code during testing or debugging.
    This helps isolate bugs without deleting code.
    Use Ctrl + / (Win) or Cmd + / (Mac) to toggle comments quickly.

🔸 Example:
    x = 1
    y = 2
    # y = y + x  # Temporarily disabled

    print(x + y)  # Outputs 3, not 4

#26 LAB: Comments
🔹 Notes:
Improve code readability using good variable names.
Add useful comments, but remove redundant or misleading ones.
A variable like total_area is more readable than x.

🔸 Example (Improved Code):
    # Calculate area of a rectangle
    length = 5
    width = 3

    # Formula: area = length × width
    rectangle_area = length * width

    print("Area of rectangle:", rectangle_area)

# Section Summary
🔹 Key Takeaways:
    Comments begin with #, and are not executed.
    Use them to explain code, disable code, and improve readability.
    Always prefer self-explanatory variable names over unclear ones.
    Keep comments accurate and helpful – misleading comments are worse than none.

🔸 Example Recap:
    # Introduction message
    print("Hello!")  # Greeting the user

    # print("I'm Python.")  # Temporarily disabled

-----------------------------------------------------------------------
# Interaction with the user

#27 The input() Function
🔹 Notes:
    input() reads user input from the console.
    The result is always a string, even if the user enters numbers.

🔸 Example:
    print("Tell me anything...")
    anything = input()
    print("Hmm...", anything, "... Really?")

#28 input() with a Prompt
🔹 Notes:
    input("message") displays a message before waiting for input.
    It saves using a separate print() line.

🔸 Example:
    anything = input("Tell me anything... ")
    print("Hmm...", anything, "...Really?")

#29 input() Returns a String
🔹 Problem:
    input() always returns a string, even if a number is entered.
    Arithmetic operations (like **, +, /) on strings cause TypeError.

🔸 Bad Example (Causes Error):
    number = input("Enter a number: ")
    result = number ** 2  # ❌ Error: can't raise a string to a power

#30 Type Casting
🔹 Notes:
    Use int() or float() to convert input into numeric types.

🔸 Good Examples:
    x = float(input("Enter a number: "))
    print("Square is:", x ** 2)

    # Direct cast without storing intermediate variable
    print("Square is:", float(input("Enter a number: ")) ** 2)

#31 Hypotenuse Example with Input
🔸 Example:
    a = float(input("Enter the first leg length: "))
    b = float(input("Enter the second leg length: "))
    print("Hypotenuse length is", (a**2 + b**2) ** 0.5)

#32 String Operators: + and *
🔹 Notes:
    + concatenates strings.
    * replicates a string.

🔸 Examples:
    # Concatenation
    first = input("First: ")
    second = input("Second: ")
    print("Combined:", first + second)

    # Replication
    text = input("Enter something: ")
    print(text * 3)

#33 Type Conversion: str()
🔹 Notes:
    str() converts numbers to strings for printing or combining.

🔸 Example:
    a = 3.0
    b = 4.0
    print("Hypotenuse is: " + str((a ** 2 + b ** 2) ** 0.5))

#34 LAB: Simple Input/Output
    Write a program that takes two numbers and performs 4 operations:

    x = float(input("Enter first number: "))
    y = float(input("Enter second number: "))

    print("Addition:", x + y)
    print("Subtraction:", x - y)
    print("Multiplication:", x * y)
    print("Division:", x / y)

#35 LAB: Operators and Expressions
Calculate:

    # y = 1 / (x + 1/(x + 1/(x + 1/x)))
    x = float(input())
    y = 1 / (x + 1 / (x + 1 / (x + 1 / x)))
    print("y =", y)

#36 LAB: Time Calculation
    Find end time given start hour, minute, and duration in minutes:

    start_hour = int(input())
    start_minute = int(input())
    duration = int(input())

    total_minutes = start_hour * 60 + start_minute + duration
    end_hour = (total_minutes // 60) % 24
    end_minute = total_minutes % 60

    print(f"{end_hour}:{end_minute}")

# Section Summary
    🧠 Key Points:
    input() returns strings → use int() or float() to convert.
    Use + for concatenation, * for replication of strings.
    Use str() to convert numbers to strings for display.
    You can prompt the user with input("Prompt: ").
    Programs pause at input() until the user presses Enter.

-----------------------------------------------------------------------------------

# Making decisions in Python

#37 Equality Operator (==)
    Checks if two values are equal.
    Returns True if they are equal, otherwise False.

🔸 Example:

    print(2 == 2)      # True
    print(1 == 2)      # False
    print(2 == 2.0)    # True

#38 Inequality Operator (!=)
    Checks if two values are not equal.
    Returns True if they are different, otherwise False.

🔸 Example:
    x = 5
    print(x != 5)  # False
    print(x != 3)  # True

#39 Greater Than (>)
    Returns True if the left value is greater than the right value.

🔸 Example:

a = 10
b = 7
print(a > b)  # True

#40 Greater Than or Equal To (>=)
    Returns True if the left value is greater than or equal to the right.

🔸 Example:

temperature = 0.0
print(temperature >= 0.0)  # True